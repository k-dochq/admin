generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model AdminRole {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  adminGrade  AdminGrade @default(STAFF)
  level       Int        @default(0)
  permissions Json?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  UserRole    UserRole[]

  @@schema("public")
}

// 초대코드 유형
enum InvitationCodeKind {
  VIP                // VIP 인비테이션 코드 (만료 없음, 1회 사용)
  PAYMENT_REFERENCE  // 멤버십 비용 지불 레퍼런스 코드 (발급 후 30일 등 만료 설정)

  @@schema("public")
}

// 초대코드 엔티티
model InvitationCode {
  id        String              @id @default(uuid()) @db.Uuid
  code      String              @unique @db.VarChar(255) // 사람이 입력하는 초대코드(고유)
  kind      InvitationCodeKind
  expiresAt DateTime?           @db.Timestamptz(6)       // VIP는 null(만료 없음), 레퍼런스 코드는 발급 시 +30일 등
  usedAt    DateTime?           @db.Timestamptz(6)       // 사용 시각 기록용(선택)

  // 1:1 역참조(외래키는 User에 존재) — invitationCodeId가 @unique라서 1:1
  UsedBy    User?

  createdAt DateTime            @default(now())

  @@schema("public")
}

model User {
  id                          String     @id @db.Uuid
  displayName                 String?
  createdAt                   DateTime   @default(now())
  updatedAt                   DateTime
  aud                         String?    @db.VarChar(255)
  banned_until                DateTime?  @db.Timestamptz(6)
  confirmation_sent_at        DateTime?  @db.Timestamptz(6)
  confirmation_token          String?    @db.VarChar(255)
  confirmed_at                DateTime?  @db.Timestamptz(6)
  deleted_at                  DateTime?  @db.Timestamptz(6)
  email                       String?    @db.VarChar(255)
  email_change                String?    @db.VarChar(255)
  email_change_confirm_status Int?       @default(0) @db.SmallInt
  email_change_sent_at        DateTime?  @db.Timestamptz(6)
  email_change_token_current  String?    @default("") @db.VarChar(255)
  email_change_token_new      String?    @db.VarChar(255)
  email_confirmed_at          DateTime?  @db.Timestamptz(6)
  encrypted_password          String?    @db.VarChar(255)
  instance_id                 String?    @db.Uuid
  invited_at                  DateTime?  @db.Timestamptz(6)
  is_anonymous                Boolean    @default(false)
  is_sso_user                 Boolean    @default(false)
  is_super_admin              Boolean?
  last_sign_in_at             DateTime?  @db.Timestamptz(6)
  phone                       String?    @unique
  phone_change                String?    @default("")
  phone_change_sent_at        DateTime?  @db.Timestamptz(6)
  phone_change_token          String?    @default("") @db.VarChar(255)
  phone_confirmed_at          DateTime?  @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  reauthentication_sent_at    DateTime?  @db.Timestamptz(6)
  reauthentication_token      String?    @default("") @db.VarChar(255)
  recovery_sent_at            DateTime?  @db.Timestamptz(6)
  recovery_token              String?    @db.VarChar(255)
  role                        String?    @db.VarChar(255)

  // 초대코드 연결(가입 선택)
  invitationCodeId            String?    @unique @db.Uuid
  invitationCode              InvitationCode? @relation(fields: [invitationCodeId], references: [id], onDelete: Restrict)

  UserRole                    UserRole[]

  @@schema("public")
}

model UserRole {
  id        Int       @id @default(autoincrement())
  userId    String    @db.Uuid
  roleId    Int
  createdAt DateTime  @default(now())
  createdBy String?   @db.Uuid
  AdminRole AdminRole @relation(fields: [roleId], references: [id])
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([roleId])
  @@index([userId])
  @@schema("public")
}

enum AdminGrade {
  STAFF
  SUPER_ADMIN

  @@schema("public")
}
