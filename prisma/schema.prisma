generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model AdminRole {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  adminGrade  AdminGrade @default(STAFF)
  level       Int        @default(0)
  permissions Json?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  UserRole    UserRole[]

  @@schema("public")
}

// 초대코드 유형
enum InvitationCodeKind {
  VIP                // VIP 인비테이션 코드 (만료 없음, 1회 사용)
  PAYMENT_REFERENCE  // 멤버십 비용 지불 레퍼런스 코드 (발급 후 30일 등 만료 설정)

  @@schema("public")
}

// 초대코드 엔티티
model InvitationCode {
  id        String              @id @default(uuid()) @db.Uuid
  code      String              @unique @db.VarChar(255) // 사람이 입력하는 초대코드(고유)
  kind      InvitationCodeKind
  expiresAt DateTime?           @db.Timestamptz(6)       // VIP는 null(만료 없음), 레퍼런스 코드는 발급 시 +30일 등
  usedAt    DateTime?           @db.Timestamptz(6)       // 사용 시각 기록용(선택)

  // 1:1 역참조(외래키는 User에 존재) — invitationCodeId가 @unique라서 1:1
  UsedBy    User?

  createdAt DateTime            @default(now())

  @@schema("public")
}

model User {
  id                          String     @id @db.Uuid
  displayName                 String?
  createdAt                   DateTime   @default(now())
  updatedAt                   DateTime
  aud                         String?    @db.VarChar(255)
  banned_until                DateTime?  @db.Timestamptz(6)
  confirmation_sent_at        DateTime?  @db.Timestamptz(6)
  confirmation_token          String?    @db.VarChar(255)
  confirmed_at                DateTime?  @db.Timestamptz(6)
  deleted_at                  DateTime?  @db.Timestamptz(6)
  email                       String?    @db.VarChar(255)
  email_change                String?    @db.VarChar(255)
  email_change_confirm_status Int?       @default(0) @db.SmallInt
  email_change_sent_at        DateTime?  @db.Timestamptz(6)
  email_change_token_current  String?    @default("") @db.VarChar(255)
  email_change_token_new      String?    @db.VarChar(255)
  email_confirmed_at          DateTime?  @db.Timestamptz(6)
  encrypted_password          String?    @db.VarChar(255)
  instance_id                 String?    @db.Uuid
  invited_at                  DateTime?  @db.Timestamptz(6)
  is_anonymous                Boolean    @default(false)
  is_sso_user                 Boolean    @default(false)
  is_super_admin              Boolean?
  last_sign_in_at             DateTime?  @db.Timestamptz(6)
  phone                       String?    @unique
  phone_change                String?    @default("")
  phone_change_sent_at        DateTime?  @db.Timestamptz(6)
  phone_change_token          String?    @default("") @db.VarChar(255)
  phone_confirmed_at          DateTime?  @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  reauthentication_sent_at    DateTime?  @db.Timestamptz(6)
  reauthentication_token      String?    @default("") @db.VarChar(255)
  recovery_sent_at            DateTime?  @db.Timestamptz(6)
  recovery_token              String?    @db.VarChar(255)
  role                        String?    @db.VarChar(255)

  // 초대코드 연결(가입 선택)
  invitationCodeId            String?    @unique @db.Uuid
  invitationCode              InvitationCode? @relation(fields: [invitationCodeId], references: [id], onDelete: Restrict)

  // drmiracle_analysis 관계들
  reviews                     Review[]
  appointments                Appointment[]
  consultings                 Consulting[]
  payments                    Payment[]
  communities                 Community[]
  chatRoomUsers               ChatRoomUser[]
  communityThreads            CommunityThread[]
  reviewThreads               ReviewThread[]
  bookmarks                   Bookmark[]
  userLikes                   UserLike[]
  userReports                 UserReport[]

  UserRole                    UserRole[]

  @@schema("public")
}

model UserRole {
  id        Int       @id @default(autoincrement())
  userId    String    @db.Uuid
  roleId    Int
  createdAt DateTime  @default(now())
  createdBy String?   @db.Uuid
  AdminRole AdminRole @relation(fields: [roleId], references: [id])
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([roleId])
  @@index([userId])
  @@schema("public")
}

enum AdminGrade {
  STAFF
  SUPER_ADMIN

  @@schema("public")
}

// drmiracle_analysis enum types
enum UserRoleType {
  PATIENT
  DOCTOR
  ADMIN

  @@schema("public")
}

enum UserGenderType {
  MALE
  FEMALE
  OTHER

  @@schema("public")
}

enum UserLocale {
  ko_KR
  en_US
  th_TH

  @@schema("public")
}

enum UserStatusType {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED

  @@schema("public")
}

enum DoctorApprovalStatusType {
  PENDING
  APPROVED
  REJECTED

  @@schema("public")
}

enum DoctorGenderType {
  MALE
  FEMALE

  @@schema("public")
}

enum HospitalApprovalStatusType {
  PENDING
  APPROVED
  REJECTED

  @@schema("public")
}

enum DistrictCountryCode {
  KR
  TH

  @@schema("public")
}

enum CategoryType {
  HOSPITAL
  DOCTOR
  PRODUCT
  REVIEW

  @@schema("public")
}

enum BookmarkType {
  HOSPITAL
  DOCTOR
  PRODUCT
  REVIEW

  @@schema("public")
}

enum BookmarkEntityType {
  HOSPITAL
  DOCTOR
  PRODUCT
  REVIEW

  @@schema("public")
}

enum ContentType {
  IMAGE
  VIDEO
  TEXT
  DOCUMENT

  @@schema("public")
}

enum HospitalContentType {
  MAIN_IMAGE
  GALLERY
  CERTIFICATE
  FACILITY

  @@schema("public")
}

enum DoctorContentType {
  PROFILE_IMAGE
  CERTIFICATE
  EXPERIENCE

  @@schema("public")
}

enum ProductContentType {
  MAIN_IMAGE
  DETAIL_IMAGE
  BEFORE_AFTER

  @@schema("public")
}

enum ReviewContentType {
  BEFORE_IMAGE
  AFTER_IMAGE
  REVIEW_IMAGE

  @@schema("public")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED

  @@schema("public")
}

enum AppointmentGenderType {
  MALE
  FEMALE
  OTHER

  @@schema("public")
}

enum ConsultingStatusType {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED

  @@schema("public")
}

enum ConsultingTimeType {
  MORNING
  AFTERNOON
  EVENING

  @@schema("public")
}

enum ConsultingGenderType {
  MALE
  FEMALE
  OTHER

  @@schema("public")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED

  @@schema("public")
}

enum PaymentType {
  CREDIT_CARD
  BANK_TRANSFER
  POINT
  CASH

  @@schema("public")
}

enum PointChargeStatusType {
  PENDING
  COMPLETED
  FAILED

  @@schema("public")
}

enum PointUsageStatusType {
  COMPLETED
  REFUNDED

  @@schema("public")
}

enum PointUsageEntityType {
  APPOINTMENT
  PRODUCT
  CONSULTING

  @@schema("public")
}

enum ProductApprovalStatusType {
  PENDING
  APPROVED
  REJECTED

  @@schema("public")
}

enum AdvertisementApprovalStatusType {
  PENDING
  APPROVED
  REJECTED

  @@schema("public")
}

enum AdvertisementType {
  BANNER
  POPUP
  INLINE

  @@schema("public")
}

enum CommunityType {
  GENERAL
  QNA
  REVIEW
  EVENT

  @@schema("public")
}

enum ChatUserType {
  USER
  DOCTOR
  ADMIN

  @@schema("public")
}

enum ChatRoomUserType {
  MEMBER
  ADMIN

  @@schema("public")
}

enum UserLikeEntityType {
  HOSPITAL
  DOCTOR
  PRODUCT
  REVIEW
  COMMUNITY

  @@schema("public")
}

enum UserReportEntityType {
  USER
  HOSPITAL
  DOCTOR
  PRODUCT
  REVIEW
  COMMUNITY

  @@schema("public")
}

enum UserReportStatusType {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED

  @@schema("public")
}

// District (지역) 모델
model District {
  id          String              @id @default(uuid()) @db.Uuid
  name        Json                // 다국어 지원
  countryCode DistrictCountryCode
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  // 관계
  hospitals   Hospital[]

  @@schema("public")
}

// Category (카테고리) 모델
model Category {
  id           String      @id @default(uuid()) @db.Uuid
  name         Json        // 다국어 지원
  categoryType CategoryType
  description  String?
  order        Int?
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // 관계
  hospitalCategoryMaps HospitalCategoryMap[]
  doctorCategoryMaps   DoctorCategoryMap[]
  productCategoryMaps  ProductCategoryMap[]
  reviewCategoryMaps   ReviewCategoryMap[]

  @@schema("public")
}

// HospitalInfo (병원 정보) 모델
model HospitalInfo {
  id        String   @id @default(uuid()) @db.Uuid
  info      Json     // 추가 정보
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  hospital  Hospital?

  @@schema("public")
}

// HospitalProperty (병원 속성) 모델
model HospitalProperty {
  id          String @id @default(uuid()) @db.Uuid
  name        Json   // 다국어 지원
  description Json?  // 다국어 지원
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  hospitalPropertyMaps HospitalPropertyMap[]

  @@schema("public")
}

// Hospital (병원) 모델
model Hospital {
  id                   String                      @id @default(uuid()) @db.Uuid
  name                 Json                        // 다국어 지원
  address              Json                        // 다국어 지원
  directions           Json?                       // 다국어 지원
  phoneNumber          String?                     @db.VarChar(20)
  description          Json?                       // 다국어 지원
  openingHours         Json?                       // 영업시간
  reviewCount          Int                         @default(0)
  productCount         Int                         @default(0)
  bookmarkCount        Int                         @default(0)
  viewCount            Int                         @default(0)
  rating               Float                       @default(0)
  point                Int                         @default(0)
  email                String?                     @unique @db.VarChar(255)
  subPhoneNumbers      Json                        @default("[]")
  lineId               String?                     @db.VarChar(255)
  memo                 String?
  reviewUrl            String?
  settings             Json?
  enableJp             Boolean                     @default(false)
  prices               Json?
  ranking              Int?
  discountRate         Float?
  approvalStatusType   HospitalApprovalStatusType  @default(APPROVED)
  rejectReason         String?
  baseId               String?                     @db.Uuid
  hasClone             Boolean                     @default(false)
  districtId           String?                     @db.Uuid
  hospitalInfoId       String?                     @unique @db.Uuid
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt

  // 관계
  district             District?                   @relation(fields: [districtId], references: [id], onDelete: Cascade)
  hospitalInfo         HospitalInfo?               @relation(fields: [hospitalInfoId], references: [id])
  doctors              Doctor[]
  products             Product[]
  reviews              Review[]
  appointments         Appointment[]
  consultings          Consulting[]
  payments             Payment[]
  advertisements       Advertisement[]
  hospitalContents     HospitalContent[]
  hospitalCategoryMaps HospitalCategoryMap[]
  hospitalPropertyMaps HospitalPropertyMap[]
  pointChargeHistories PointChargeHistory[]
  pointUsageHistories  PointUsageHistory[]
  aiReports            AiReport[]

  @@index([districtId])
  @@index([baseId])
  @@schema("public")
}

// Doctor (의사) 모델
model Doctor {
  id                 String                    @id @default(uuid()) @db.Uuid
  name               Json                      // 다국어 지원
  position           Json?                     // 다국어 지원
  licenseNumber      String?                   @db.VarChar(50)
  licenseDate        DateTime?
  description        String?                   @db.VarChar(500)
  genderType         DoctorGenderType
  viewCount          Int                       @default(0)
  bookmarkCount      Int                       @default(0)
  order              Int?
  stop               Boolean                   @default(false)
  approvalStatusType DoctorApprovalStatusType  @default(APPROVED)
  rejectReason       String?
  baseId             String?                   @db.Uuid
  hasClone           Boolean                   @default(false)
  hospitalId         String                    @db.Uuid
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt

  // 관계
  hospital           Hospital                  @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  doctorContents     DoctorContent[]
  doctorCategoryMaps DoctorCategoryMap[]

  @@index([hospitalId])
  @@index([baseId])
  @@schema("public")
}

// Product (상품) 모델
model Product {
  id                 String                    @id @default(uuid()) @db.Uuid
  name               Json                      // 다국어 지원
  description        Json?                     // 다국어 지원
  price              Int?
  discountPrice      Int?
  isActive           Boolean                   @default(true)
  viewCount          Int                       @default(0)
  bookmarkCount      Int                       @default(0)
  order              Int?
  approvalStatusType ProductApprovalStatusType @default(APPROVED)
  rejectReason       String?
  baseId             String?                   @db.Uuid
  hasClone           Boolean                   @default(false)
  hospitalId         String                    @db.Uuid
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt

  // 관계
  hospital            Hospital              @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  productContents     ProductContent[]
  productCategoryMaps ProductCategoryMap[]
  advertisementProducts AdvertisementProduct[]
  pointUsageHistories PointUsageHistory[]

  @@index([hospitalId])
  @@index([baseId])
  @@schema("public")
}

// Review (리뷰) 모델
model Review {
  id            String   @id @default(uuid()) @db.Uuid
  rating        Float    @default(0)
  title         Json?    // 다국어 지원
  content       Json?    // 다국어 지원
  isRecommended Boolean  @default(false)
  viewCount     Int      @default(0)
  likeCount     Int      @default(0)
  userId        String   @db.Uuid
  hospitalId    String   @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 관계
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  hospital           Hospital            @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  reviewContents     ReviewContent[]
  reviewCategoryMaps ReviewCategoryMap[]
  reviewThreads      ReviewThread[]

  @@index([userId])
  @@index([hospitalId])
  @@schema("public")
}

// Appointment (예약) 모델
model Appointment {
  id              String               @id @default(uuid()) @db.Uuid
  appointmentDate DateTime
  notes           String?
  status          AppointmentStatus    @default(PENDING)
  genderType      AppointmentGenderType?
  age             Int?
  phoneNumber     String?              @db.VarChar(20)
  userId          String               @db.Uuid
  hospitalId      String               @db.Uuid
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  // 관계
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  hospital        Hospital             @relation(fields: [hospitalId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([hospitalId])
  @@schema("public")
}

// Consulting (상담) 모델
model Consulting {
  id           String                @id @default(uuid()) @db.Uuid
  title        String?
  content      String?
  status       ConsultingStatusType  @default(PENDING)
  timeType     ConsultingTimeType?
  genderType   ConsultingGenderType?
  age          Int?
  phoneNumber  String?               @db.VarChar(20)
  consultingDate DateTime?
  locale       UserLocale            @default(ko_KR)
  userId       String                @db.Uuid
  hospitalId   String                @db.Uuid
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  // 관계
  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  hospital     Hospital              @relation(fields: [hospitalId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([hospitalId])
  @@schema("public")
}

// Payment (결제) 모델
model Payment {
  id         String        @id @default(uuid()) @db.Uuid
  amount     Int
  status     PaymentStatus @default(PENDING)
  type       PaymentType
  paymentKey String?       @unique
  orderId    String?       @unique
  currency   String?       @default("KRW")
  userId     String        @db.Uuid
  hospitalId String        @db.Uuid
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // 관계
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  hospital   Hospital      @relation(fields: [hospitalId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([hospitalId])
  @@schema("public")
}

// PointChargeHistory (포인트 충전 내역) 모델
model PointChargeHistory {
  id         String                 @id @default(uuid()) @db.Uuid
  amount     Int
  status     PointChargeStatusType  @default(PENDING)
  paymentKey String?
  orderId    String?                @unique
  hospitalId String                 @db.Uuid
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt

  // 관계
  hospital   Hospital               @relation(fields: [hospitalId], references: [id])

  @@index([hospitalId])
  @@schema("public")
}

// PointUsageHistory (포인트 사용 내역) 모델
model PointUsageHistory {
  id         String                 @id @default(uuid()) @db.Uuid
  amount     Int
  status     PointUsageStatusType   @default(COMPLETED)
  entityType PointUsageEntityType
  entityId   String?                @db.Uuid
  hospitalId String                 @db.Uuid
  productId  String?                @db.Uuid
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt

  // 관계
  hospital   Hospital               @relation(fields: [hospitalId], references: [id])
  product    Product?               @relation(fields: [productId], references: [id])

  @@index([hospitalId])
  @@index([productId])
  @@schema("public")
}

// Advertisement (광고) 모델
model Advertisement {
  id                 String                          @id @default(uuid()) @db.Uuid
  title              Json                            // 다국어 지원
  description        Json?                           // 다국어 지원
  startDate          DateTime?
  endDate            DateTime?
  isActive           Boolean                         @default(true)
  clickCount         Int                             @default(0)
  viewCount          Int                             @default(0)
  approvalStatusType AdvertisementApprovalStatusType @default(PENDING)
  rejectReason       String?
  locale             UserLocale                      @default(ko_KR)
  hospitalId         String                          @db.Uuid
  createdAt          DateTime                        @default(now())
  updatedAt          DateTime                        @updatedAt

  // 관계
  hospital              Hospital                @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  advertisementContents AdvertisementContent[]
  advertisementProducts AdvertisementProduct[]

  @@index([hospitalId])
  @@schema("public")
}

// Community (커뮤니티) 모델
model Community {
  id           String        @id @default(uuid()) @db.Uuid
  title        Json          // 다국어 지원
  content      Json?         // 다국어 지원
  communityType CommunityType @default(GENERAL)
  viewCount    Int           @default(0)
  likeCount    Int           @default(0)
  commentCount Int           @default(0)
  isNotice     Boolean       @default(false)
  isPinned     Boolean       @default(false)
  locale       UserLocale    @default(ko_KR)
  userId       String        @db.Uuid
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // 관계
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityContents CommunityContent[]
  communityThreads  CommunityThread[]

  @@index([userId])
  @@schema("public")
}

// Chat (채팅) 모델
model Chat {
  id           String       @id @default(uuid()) @db.Uuid
  title        String?
  userType     ChatUserType @default(USER)
  locale       UserLocale   @default(ko_KR)
  lastMessageAt DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // 관계
  chatContents   ChatContent[]
  chatRooms      ChatRoom[]

  @@schema("public")
}

// ChatRoom (채팅방) 모델
model ChatRoom {
  id        String   @id @default(uuid()) @db.Uuid
  name      String?
  isActive  Boolean  @default(true)
  chatId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  chat          Chat             @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatRoomUsers ChatRoomUser[]

  @@index([chatId])
  @@schema("public")
}

// CarService (차량 서비스) 모델
model CarService {
  id          String   @id @default(uuid()) @db.Uuid
  name        Json     // 다국어 지원
  description Json?    // 다국어 지원
  price       Int?
  duration    Int?     // 분 단위
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  carServiceSlots       CarServiceSlot[]
  carServiceAppointments CarServiceAppointment[]

  @@schema("public")
}

// CarServiceSlot (차량 서비스 슬롯) 모델
model CarServiceSlot {
  id           String   @id @default(uuid()) @db.Uuid
  startTime    DateTime
  endTime      DateTime
  isAvailable  Boolean  @default(true)
  carServiceId String   @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 관계
  carService   CarService @relation(fields: [carServiceId], references: [id], onDelete: Cascade)

  @@index([carServiceId])
  @@schema("public")
}

// CarServiceAppointment (차량 서비스 예약) 모델
model CarServiceAppointment {
  id            String          @id @default(uuid()) @db.Uuid
  appointmentDate DateTime
  status        AppointmentStatus @default(PENDING)
  notes         String?
  carServiceId  String          @db.Uuid
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // 관계
  carService    CarService      @relation(fields: [carServiceId], references: [id], onDelete: Cascade)

  @@index([carServiceId])
  @@schema("public")
}

// AiReport (AI 리포트) 모델
model AiReport {
  id         String   @id @default(uuid()) @db.Uuid
  title      String
  content    Json     // AI 리포트 내용
  score      Float?   // AI 점수
  reportType String?  // 리포트 타입
  hospitalId String   @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // 관계
  hospital   Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)

  @@index([hospitalId])
  @@schema("public")
}

// SearchHistory (검색 기록) 모델
model SearchHistory {
  id          String   @id @default(uuid()) @db.Uuid
  searchTerm  String
  searchCount Int      @default(1)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@schema("public")
}

// 관계 매핑 테이블들

// HospitalCategoryMap (병원-카테고리 매핑) 모델
model HospitalCategoryMap {
  hospitalId String   @db.Uuid
  categoryId String   @db.Uuid
  createdAt  DateTime @default(now())

  // 관계
  hospital   Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([hospitalId, categoryId])
  @@index([hospitalId])
  @@index([categoryId])
  @@schema("public")
}

// DoctorCategoryMap (의사-카테고리 매핑) 모델
model DoctorCategoryMap {
  doctorId   String   @db.Uuid
  categoryId String   @db.Uuid
  createdAt  DateTime @default(now())

  // 관계
  doctor     Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([doctorId, categoryId])
  @@index([doctorId])
  @@index([categoryId])
  @@schema("public")
}

// ProductCategoryMap (상품-카테고리 매핑) 모델
model ProductCategoryMap {
  productId  String   @db.Uuid
  categoryId String   @db.Uuid
  createdAt  DateTime @default(now())

  // 관계
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
  @@schema("public")
}

// ReviewCategoryMap (리뷰-카테고리 매핑) 모델
model ReviewCategoryMap {
  reviewId   String   @db.Uuid
  categoryId String   @db.Uuid
  createdAt  DateTime @default(now())

  // 관계
  review     Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([reviewId, categoryId])
  @@index([reviewId])
  @@index([categoryId])
  @@schema("public")
}

// HospitalPropertyMap (병원-속성 매핑) 모델
model HospitalPropertyMap {
  hospitalId String           @db.Uuid
  propertyId String           @db.Uuid
  value      String?          // 속성 값
  createdAt  DateTime         @default(now())

  // 관계
  hospital   Hospital         @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  property   HospitalProperty @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@id([hospitalId, propertyId])
  @@index([hospitalId])
  @@index([propertyId])
  @@schema("public")
}

// 콘텐츠 테이블들

// HospitalContent (병원 콘텐츠) 모델
model HospitalContent {
  id                    String              @id @default(uuid()) @db.Uuid
  url                   String              // 파일 URL
  contentType           ContentType
  hospitalContentType   HospitalContentType
  locale                UserLocale          @default(ko_KR)
  title                 String?
  description           String?
  order                 Int?
  hospitalId            String              @db.Uuid
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  // 관계
  hospital              Hospital            @relation(fields: [hospitalId], references: [id], onDelete: Cascade)

  @@index([hospitalId])
  @@schema("public")
}

// DoctorContent (의사 콘텐츠) 모델
model DoctorContent {
  id                  String            @id @default(uuid()) @db.Uuid
  url                 String            // 파일 URL
  contentType         ContentType
  doctorContentType   DoctorContentType
  locale              UserLocale        @default(ko_KR)
  title               String?
  description         String?
  order               Int?
  doctorId            String            @db.Uuid
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // 관계
  doctor              Doctor            @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@index([doctorId])
  @@schema("public")
}

// ProductContent (상품 콘텐츠) 모델
model ProductContent {
  id                   String             @id @default(uuid()) @db.Uuid
  url                  String             // 파일 URL
  contentType          ContentType
  productContentType   ProductContentType
  locale               UserLocale         @default(ko_KR)
  title                String?
  description          String?
  order                Int?
  productId            String             @db.Uuid
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  // 관계
  product              Product            @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@schema("public")
}

// ReviewContent (리뷰 콘텐츠) 모델
model ReviewContent {
  id                  String            @id @default(uuid()) @db.Uuid
  url                 String            // 파일 URL
  contentType         ContentType
  reviewContentType   ReviewContentType
  locale              UserLocale        @default(ko_KR)
  title               String?
  description         String?
  order               Int?
  reviewId            String            @db.Uuid
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // 관계
  review              Review            @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@schema("public")
}

// CommunityContent (커뮤니티 콘텐츠) 모델
model CommunityContent {
  id          String     @id @default(uuid()) @db.Uuid
  url         String     // 파일 URL
  contentType ContentType
  locale      UserLocale @default(ko_KR)
  title       String?
  description String?
  order       Int?
  communityId String     @db.Uuid
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // 관계
  community   Community  @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@index([communityId])
  @@schema("public")
}

// AdvertisementContent (광고 콘텐츠) 모델
model AdvertisementContent {
  id              String        @id @default(uuid()) @db.Uuid
  url             String        // 파일 URL
  contentType     ContentType
  locale          UserLocale    @default(ko_KR)
  title           String?
  description     String?
  order           Int?
  advertisementId String        @db.Uuid
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // 관계
  advertisement   Advertisement @relation(fields: [advertisementId], references: [id], onDelete: Cascade)

  @@index([advertisementId])
  @@schema("public")
}

// AdvertisementProduct (광고 상품) 모델
model AdvertisementProduct {
  id                  String            @id @default(uuid()) @db.Uuid
  advertisementType   AdvertisementType @default(BANNER)
  locale              UserLocale        @default(ko_KR)
  order               Int?
  advertisementId     String            @db.Uuid
  productId           String            @db.Uuid
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // 관계
  advertisement       Advertisement     @relation(fields: [advertisementId], references: [id], onDelete: Cascade)
  product             Product           @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([advertisementId])
  @@index([productId])
  @@schema("public")
}

// ChatContent (채팅 콘텐츠) 모델
model ChatContent {
  id          String      @id @default(uuid()) @db.Uuid
  message     String
  contentType ContentType @default(TEXT)
  locale      UserLocale  @default(ko_KR)
  isRead      Boolean     @default(false)
  chatId      String      @db.Uuid
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // 관계
  chat        Chat        @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@schema("public")
}

// ChatRoomUser (채팅방 사용자) 모델
model ChatRoomUser {
  id         String           @id @default(uuid()) @db.Uuid
  userType   ChatRoomUserType @default(MEMBER)
  joinedAt   DateTime         @default(now())
  leftAt     DateTime?
  chatRoomId String           @db.Uuid
  userId     String           @db.Uuid
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  // 관계
  chatRoom   ChatRoom         @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([chatRoomId])
  @@index([userId])
  @@schema("public")
}

// CommunityThread (커뮤니티 스레드) 모델
model CommunityThread {
  id          String    @id @default(uuid()) @db.Uuid
  content     Json      // 다국어 지원
  likeCount   Int       @default(0)
  isDeleted   Boolean   @default(false)
  communityId String    @db.Uuid
  userId      String    @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // 관계
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([communityId])
  @@index([userId])
  @@schema("public")
}

// ReviewThread (리뷰 스레드) 모델
model ReviewThread {
  id        String   @id @default(uuid()) @db.Uuid
  content   Json     // 다국어 지원
  likeCount Int      @default(0)
  isDeleted Boolean  @default(false)
  reviewId  String   @db.Uuid
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@index([userId])
  @@schema("public")
}

// Bookmark (북마크) 모델
model Bookmark {
  id         String              @id @default(uuid()) @db.Uuid
  entityType BookmarkEntityType
  entityId   String              @db.Uuid
  userId     String              @db.Uuid
  createdAt  DateTime            @default(now())

  // 관계
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, entityType, entityId])
  @@index([userId])
  @@index([entityId])
  @@schema("public")
}

// UserLike (사용자 좋아요) 모델
model UserLike {
  id         String              @id @default(uuid()) @db.Uuid
  entityType UserLikeEntityType
  entityId   String              @db.Uuid
  userId     String              @db.Uuid
  createdAt  DateTime            @default(now())

  // 관계
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, entityType, entityId])
  @@index([userId])
  @@index([entityId])
  @@schema("public")
}

// UserReport (사용자 신고) 모델
model UserReport {
  id         String                 @id @default(uuid()) @db.Uuid
  entityType UserReportEntityType
  entityId   String                 @db.Uuid
  reason     String
  status     UserReportStatusType   @default(PENDING)
  adminNote  String?
  userId     String                 @db.Uuid
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt

  // 관계
  user       User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([entityId])
  @@index([status])
  @@schema("public")
}
