generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model AdminRole {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  adminGrade  AdminGrade @default(STAFF)
  level       Int        @default(0)
  permissions Json?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  UserRole    UserRole[]

  @@schema("public")
}

model InvitationCode {
  id        String             @id @default(uuid()) @db.Uuid
  code      String             @unique @db.VarChar(255)
  kind      InvitationCodeKind
  expiresAt DateTime?          @db.Timestamptz(6)
  usedAt    DateTime?          @db.Timestamptz(6)
  createdAt DateTime           @default(now())
  UsedBy    User?

  @@schema("public")
}

model User {
  id                          String                @id @db.Uuid
  displayName                 String?
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime              @updatedAt
  aud                         String?               @db.VarChar(255)
  banned_until                DateTime?             @db.Timestamptz(6)
  confirmation_sent_at        DateTime?             @db.Timestamptz(6)
  confirmation_token          String?               @db.VarChar(255)
  confirmed_at                DateTime?             @db.Timestamptz(6)
  deleted_at                  DateTime?             @db.Timestamptz(6)
  email                       String?               @db.VarChar(255)
  email_change                String?               @db.VarChar(255)
  email_change_confirm_status Int?                  @default(0) @db.SmallInt
  email_change_sent_at        DateTime?             @db.Timestamptz(6)
  email_change_token_current  String?               @default("") @db.VarChar(255)
  email_change_token_new      String?               @db.VarChar(255)
  email_confirmed_at          DateTime?             @db.Timestamptz(6)
  encrypted_password          String?               @db.VarChar(255)
  instance_id                 String?               @db.Uuid
  invited_at                  DateTime?             @db.Timestamptz(6)
  is_anonymous                Boolean               @default(false)
  is_sso_user                 Boolean               @default(false)
  is_super_admin              Boolean?
  last_sign_in_at             DateTime?             @db.Timestamptz(6)
  phone                       String?               @unique
  phone_change                String?               @default("")
  phone_change_sent_at        DateTime?             @db.Timestamptz(6)
  phone_change_token          String?               @default("") @db.VarChar(255)
  phone_confirmed_at          DateTime?             @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  reauthentication_sent_at    DateTime?             @db.Timestamptz(6)
  reauthentication_token      String?               @default("") @db.VarChar(255)
  recovery_sent_at            DateTime?             @db.Timestamptz(6)
  recovery_token              String?               @db.VarChar(255)
  role                        String?               @db.VarChar(255)
  invitationCodeId            String?               @unique @db.Uuid
  advertPush                  Boolean?              @default(false)
  age                         Int?
  collectPersonalInfo         Boolean?              @default(false)
  communityAlarm              Boolean?              @default(false)
  deviceInfo                  String?               @db.VarChar(256)
  deviceToken                 String?               @db.VarChar(256)
  drRoleType                  UserRoleType?
  genderType                  UserGenderType?
  locale                      UserLocale?           @default(ko_KR)
  loggedInAt                  DateTime?
  name                        String?               @db.VarChar(100)
  nickName                    String?               @db.VarChar(100)
  phoneNumber                 String?               @db.VarChar(255)
  postAlarm                   Boolean?              @default(false)
  profileImgUrl               String?
  termsVersion                String?               @db.VarChar(20)
  userStatusType              UserStatusType?       @default(ACTIVE)
  comments                    Comment[]
  consultationMessages        ConsultationMessage[]
  DoctorLike                  DoctorLike[]
  HospitalLike                HospitalLike[]
  reservations                Reservation[]
  reviews                     Review[]
  ReviewLike                  ReviewLike[]
  invitationCode              InvitationCode?       @relation(fields: [invitationCodeId], references: [id], onDelete: Restrict)
  UserRole                    UserRole[]

  @@schema("public")
}

model UserRole {
  id        Int       @id @default(autoincrement())
  userId    String    @db.Uuid
  roleId    Int
  createdAt DateTime  @default(now())
  createdBy String?   @db.Uuid
  AdminRole AdminRole @relation(fields: [roleId], references: [id])
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@index([roleId])
  @@index([userId])
  @@schema("public")
}

model District {
  id          String              @id @default(uuid()) @db.Uuid
  name        Json
  countryCode DistrictCountryCode
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  displayName Json?
  level       Int                 @default(0)
  order       Int?
  parentId    String?             @db.Uuid
  parent      District?           @relation("DistrictHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    District[]          @relation("DistrictHierarchy")
  hospitals   Hospital[]

  @@index([parentId])
  @@index([level])
  @@index([countryCode])
  @@schema("public")
}

model MedicalSpecialty {
  id                  String                     @id @default(uuid()) @db.Uuid
  name                Json
  specialtyType       MedicalSpecialtyType
  description         Json?
  order               Int?
  isActive            Boolean                    @default(true)
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  doctorSpecialties   DoctorMedicalSpecialty[]
  hospitalSpecialties HospitalMedicalSpecialty[]
  reviews             Review[]

  @@schema("public")
}

model HospitalProperty {
  id          String   @id @default(uuid()) @db.Uuid
  name        Json
  description Json?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@schema("public")
}

model Hospital {
  id                   String                     @id @default(uuid()) @db.Uuid
  name                 Json
  address              Json
  directions           Json?
  phoneNumber          String?                    @db.VarChar(20)
  description          Json?
  openingHours         Json?
  reviewCount          Int                        @default(0)
  productCount         Int                        @default(0)
  bookmarkCount        Int                        @default(0)
  viewCount            Int                        @default(0)
  rating               Float                      @default(0)
  point                Int                        @default(0)
  email                String?                    @db.VarChar(255)
  subPhoneNumbers      Json                       @default("[]")
  lineId               String?                    @db.VarChar(255)
  memo                 String?
  reviewUrl            String?
  settings             Json?
  enableJp             Boolean                    @default(false)
  prices               Json?
  ranking              Int?
  discountRate         Float?
  approvalStatusType   HospitalApprovalStatusType @default(APPROVED)
  rejectReason         String?
  baseId               String?                    @db.Uuid
  hasClone             Boolean                    @default(false)
  districtId           String?                    @db.Uuid
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt
  latitude             Float?
  longitude            Float?
  displayLocationName  Json?
  consultationMessages ConsultationMessage[]
  doctors              Doctor[]
  district             District?                  @relation(fields: [districtId], references: [id], onDelete: Cascade)
  hospitalImages       HospitalImage[]
  HospitalLike         HospitalLike[]
  hospitalSpecialties  HospitalMedicalSpecialty[]
  products             Product[]
  reservations         Reservation[]
  reviews              Review[]

  @@index([districtId])
  @@index([baseId])
  @@schema("public")
}

model Doctor {
  id                 String                   @id @default(uuid()) @db.Uuid
  name               Json
  position           Json?
  licenseNumber      String?                  @db.VarChar(50)
  licenseDate        DateTime?
  description        String?                  @db.VarChar(500)
  genderType         DoctorGenderType
  viewCount          Int                      @default(0)
  bookmarkCount      Int                      @default(0)
  order              Int?
  stop               Boolean                  @default(false)
  approvalStatusType DoctorApprovalStatusType @default(APPROVED)
  rejectReason       String?
  baseId             String?                  @db.Uuid
  hasClone           Boolean                  @default(false)
  hospitalId         String                   @db.Uuid
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  career             Json?
  hospital           Hospital                 @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  doctorImages       DoctorImage[]
  DoctorLike         DoctorLike[]
  doctorSpecialties  DoctorMedicalSpecialty[]

  @@index([hospitalId])
  @@index([baseId])
  @@schema("public")
}

model Product {
  id            String   @id @default(uuid()) @db.Uuid
  name          Json
  description   Json?
  price         Int?
  discountPrice Int?
  isActive      Boolean  @default(true)
  viewCount     Int      @default(0)
  bookmarkCount Int      @default(0)
  order         Int?
  baseId        String?  @db.Uuid
  hasClone      Boolean  @default(false)
  hospitalId    String   @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  hospital      Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)

  @@index([hospitalId])
  @@index([baseId])
  @@schema("public")
}

model Review {
  id                   String           @id @default(uuid()) @db.Uuid
  rating               Float            @default(0)
  title                Json?
  content              Json?
  isRecommended        Boolean          @default(false)
  viewCount            Int              @default(0)
  likeCount            Int              @default(0)
  userId               String           @db.Uuid
  hospitalId           String           @db.Uuid
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  concerns             String?          @db.VarChar(500)
  medicalSpecialtyId   String           @db.Uuid
  concernsMultilingual Json?
  commentCount         Int              @default(0)
  comments             Comment[]
  hospital             Hospital         @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  medicalSpecialty     MedicalSpecialty @relation(fields: [medicalSpecialtyId], references: [id], onDelete: Cascade)
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewImages         ReviewImage[]
  ReviewLike           ReviewLike[]

  @@index([userId])
  @@index([hospitalId])
  @@index([medicalSpecialtyId])
  @@schema("public")
}

model HospitalMedicalSpecialty {
  id                 String           @id @default(uuid()) @db.Uuid
  hospitalId         String           @db.Uuid
  medicalSpecialtyId String           @db.Uuid
  createdAt          DateTime         @default(now())
  hospital           Hospital         @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  medicalSpecialty   MedicalSpecialty @relation(fields: [medicalSpecialtyId], references: [id], onDelete: Cascade)

  @@unique([hospitalId, medicalSpecialtyId])
  @@index([hospitalId])
  @@index([medicalSpecialtyId])
  @@schema("public")
}

model HospitalImage {
  id         String            @id @default(uuid()) @db.Uuid
  hospitalId String            @db.Uuid
  imageType  HospitalImageType
  imageUrl   String            @db.VarChar(500)
  alt        String?           @db.VarChar(255)
  order      Int?
  isActive   Boolean           @default(true)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  hospital   Hospital          @relation(fields: [hospitalId], references: [id], onDelete: Cascade)

  @@index([hospitalId])
  @@index([imageType])
  @@schema("public")
}

model ReviewImage {
  id        String          @id @default(uuid()) @db.Uuid
  reviewId  String          @db.Uuid
  imageType ReviewImageType
  imageUrl  String          @db.VarChar(500)
  alt       String?         @db.VarChar(255)
  order     Int?
  isActive  Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  review    Review          @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@index([imageType])
  @@schema("public")
}

model DoctorImage {
  id        String          @id @default(uuid()) @db.Uuid
  doctorId  String          @db.Uuid
  imageType DoctorImageType
  imageUrl  String          @db.VarChar(500)
  alt       String?         @db.VarChar(255)
  order     Int?
  isActive  Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  doctor    Doctor          @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@index([doctorId])
  @@index([imageType])
  @@schema("public")
}

model DoctorMedicalSpecialty {
  id                 String           @id @default(uuid()) @db.Uuid
  doctorId           String           @db.Uuid
  medicalSpecialtyId String           @db.Uuid
  createdAt          DateTime         @default(now())
  doctor             Doctor           @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  medicalSpecialty   MedicalSpecialty @relation(fields: [medicalSpecialtyId], references: [id], onDelete: Cascade)

  @@unique([doctorId, medicalSpecialtyId])
  @@index([doctorId])
  @@index([medicalSpecialtyId])
  @@schema("public")
}

model HospitalLike {
  id         String   @id @db.Uuid
  userId     String   @db.Uuid
  hospitalId String   @db.Uuid
  createdAt  DateTime @default(now())
  Hospital   Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, hospitalId])
  @@index([createdAt])
  @@index([hospitalId])
  @@index([userId])
  @@schema("public")
}

model ReviewLike {
  id        String   @id @db.Uuid
  userId    String   @db.Uuid
  reviewId  String   @db.Uuid
  createdAt DateTime @default(now())
  Review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
  @@index([createdAt])
  @@index([reviewId])
  @@index([userId])
  @@schema("public")
}

model DoctorLike {
  id        String   @id @db.Uuid
  userId    String   @db.Uuid
  doctorId  String   @db.Uuid
  createdAt DateTime @default(now())
  Doctor    Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, doctorId])
  @@index([createdAt])
  @@index([doctorId])
  @@index([userId])
  @@schema("public")
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  content   Json
  userId    String   @db.Uuid
  reviewId  String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([reviewId])
  @@index([createdAt])
  @@schema("public")
}

model ConsultationMessage {
  id         String     @id @default(uuid()) @db.Uuid
  userId     String     @db.Uuid
  hospitalId String     @db.Uuid
  senderType SenderType
  content    String
  createdAt  DateTime   @default(now())
  Hospital   Hospital   @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  User       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([hospitalId])
  @@index([userId, hospitalId])
  @@index([createdAt])
  @@schema("public")
}

model Notice {
  id          String       @id @default(uuid()) @db.Uuid
  title       Json
  content     Json
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdBy   String?      @db.Uuid
  updatedBy   String?      @db.Uuid
  type        NoticeType?
  noticeFiles NoticeFile[]

  @@index([isActive])
  @@index([createdAt])
  @@schema("public")
}

model NoticeFile {
  id        String         @id @default(uuid()) @db.Uuid
  noticeId  String         @db.Uuid
  fileType  NoticeFileType
  fileName  String         @db.VarChar(255)
  fileUrl   String         @db.VarChar(500)
  fileSize  Int?
  mimeType  String?        @db.VarChar(100)
  alt       String?        @db.VarChar(255)
  order     Int?
  isActive  Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  notice    Notice         @relation(fields: [noticeId], references: [id], onDelete: Cascade)

  @@index([noticeId])
  @@index([fileType])
  @@schema("public")
}

model EventBanner {
  id           String             @id @default(uuid()) @db.Uuid
  title        Json
  linkUrl      String             @db.VarChar(500)
  order        Int                @default(0)
  isActive     Boolean            @default(true)
  startDate    DateTime           @default(now()) @db.Timestamptz(6)
  endDate      DateTime?          @db.Timestamptz(6)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  createdBy    String?            @db.Uuid
  updatedBy    String?            @db.Uuid
  bannerImages EventBannerImage[]

  @@index([isActive])
  @@index([order])
  @@index([startDate])
  @@index([endDate])
  @@schema("public")
}

model EventBannerImage {
  id        String            @id @default(uuid()) @db.Uuid
  bannerId  String            @db.Uuid
  locale    EventBannerLocale
  imageUrl  String            @db.VarChar(500)
  alt       String?           @db.VarChar(255)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  banner    EventBanner       @relation(fields: [bannerId], references: [id], onDelete: Cascade)

  @@unique([bannerId, locale])
  @@index([bannerId])
  @@index([locale])
  @@schema("public")
}

model Reservation {
  id              String                     @id @default(uuid()) @db.Uuid
  userId          String                     @db.Uuid
  hospitalId      String                     @db.Uuid
  procedureName   String                     @db.VarChar(255)
  reservationDate DateTime                   @db.Date
  reservationTime String                     @db.VarChar(10)
  depositAmount   Int
  currency        String                     @default("USD") @db.VarChar(3)
  paymentDeadline DateTime                   @db.Timestamptz(6)
  status          ReservationStatus          @default(PENDING)
  createdBy       String?                    @db.Uuid
  cancelReason    String?
  metadata        Json?
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @updatedAt
  payments        Payment[]
  hospital        Hospital                   @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  user            User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  statusHistory   ReservationStatusHistory[]

  @@index([userId])
  @@index([hospitalId])
  @@index([status])
  @@index([reservationDate])
  @@index([createdAt])
  @@schema("public")
}

model Payment {
  id                       String        @id @default(uuid()) @db.Uuid
  reservationId            String        @db.Uuid
  airwallexPaymentIntentId String        @unique @db.VarChar(255)
  amount                   Int
  currency                 String        @default("USD") @db.VarChar(3)
  status                   PaymentStatus @default(PENDING)
  paymentMethod            Json?
  refundInfo               Json?
  failureReason            String?
  metadata                 Json?
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  reservation              Reservation   @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([reservationId])
  @@index([status])
  @@index([airwallexPaymentIntentId])
  @@index([createdAt])
  @@schema("public")
}

model ReservationStatusHistory {
  id            String             @id @default(uuid()) @db.Uuid
  reservationId String             @db.Uuid
  fromStatus    ReservationStatus?
  toStatus      ReservationStatus
  changedBy     String?            @db.Uuid
  reason        String?
  metadata      Json?
  createdAt     DateTime           @default(now())
  reservation   Reservation        @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  @@index([reservationId])
  @@index([createdAt])
  @@schema("public")
}

enum InvitationCodeKind {
  VIP
  PAYMENT_REFERENCE

  @@schema("public")
}

enum AdminGrade {
  STAFF
  SUPER_ADMIN

  @@schema("public")
}

enum UserRoleType {
  PATIENT
  DOCTOR
  ADMIN
  USER

  @@schema("public")
}

enum UserGenderType {
  MALE
  FEMALE
  OTHER

  @@schema("public")
}

enum UserLocale {
  ko_KR
  en_US
  th_TH

  @@schema("public")
}

enum UserStatusType {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED

  @@schema("public")
}

enum DoctorApprovalStatusType {
  PENDING
  APPROVED
  REJECTED
  WAITING_APPROVAL

  @@schema("public")
}

enum DoctorGenderType {
  MALE
  FEMALE

  @@schema("public")
}

enum HospitalApprovalStatusType {
  PENDING
  APPROVED
  REJECTED

  @@schema("public")
}

enum DistrictCountryCode {
  KR
  TH

  @@schema("public")
}

enum MedicalSpecialtyType {
  EYES
  NOSE
  FACIAL_CONTOURING
  BREAST
  STEM_CELL
  LIPOSUCTION
  LIFTING
  HAIR_TRANSPLANT
  DERMATOLOGY
  LIPS
  CHIN
  CHEEKS
  FOREHEAD
  DENTAL

  @@schema("public")
}

enum HospitalImageType {
  MAIN
  THUMBNAIL
  PROMOTION
  DETAIL
  INTERIOR

  @@schema("public")
}

enum ReviewImageType {
  BEFORE
  AFTER

  @@schema("public")
}

enum DoctorImageType {
  PROFILE
  CAREER

  @@schema("public")
}

enum SenderType {
  USER
  ADMIN

  @@schema("public")
}

enum NoticeFileType {
  IMAGE
  ATTACHMENT

  @@schema("public")
}

enum ReservationStatus {
  PENDING
  PAYMENT_PENDING
  CONFIRMED
  COMPLETED
  CANCELLED

  @@schema("public")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  REFUNDED

  @@schema("public")
}

enum NoticeType {
  INFO
  EVENT

  @@schema("public")
}

enum EventBannerLocale {
  ko
  en
  th

  @@schema("public")
}
